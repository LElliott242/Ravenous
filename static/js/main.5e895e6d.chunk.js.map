{"version":3,"sources":["components/App/logo.svg","components/Business/business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","handleSortByChange","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","renderSortByOptions","placeholder","onChange","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e895e6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './business.css';\n\n\n\n\nclass Business extends React.Component {\n    render() {\n        return (\n        <div className=\"Business\">\n            <div className=\"image-container\">\n                <img\n                src={this.props.business.imageSrc}\n                alt=' '\n                 />\n            </div>\n            <h2>{this.props.name}</h2>\n            <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                    <p>{this.props.business.address}</p>\n                    <p>{this.props.business.city}</p>\n                    <p>{this.props.business.state} {this.props.business.zipCode}</p>\n                </div>\n                <div className=\"Business-reviews\">\n                    <h3>{this.props.business.category}</h3>\n                    <h3 className=\"rating\">{this.props.business.rating}</h3>\n                    <p>{this.props.business.reviewCount}</p>\n                </div>\n            </div>\n        </div>)\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/business';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n        <div className=\"BusinessList\">\n            {\n            this.props.businesses.map(business => {\n                return <Business business={business} key={business.id}/>\n            })\n            }\n        </div>\n        );\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n        }\n\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSortByChange = this.handleSortByChange.bind(this);\n        \n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        }\n    }\n    \n    getSortByClass(sortByOption) {\n        if (this.state.sortBy === sortByOption) {\n            return 'active';\n        }  \n        return '';\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({ sortBy: sortByOption });\n    }\n\n    handleTermChange(event){\n        this.setState({ term: event.target.value});\n    }\n\n    handleLocationChange(event){\n        this.setState({ location: event.target.value});\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();\n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return (\n                <li \n                key={sortByOptionValue} \n                className={this.getSortByClass(sortByOptionValue)}\n                onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\n            )\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                    {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange}/>\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch}>Let's Go</a>\n                </div>\n            </div>\n        )\n    }\n}   \n\nexport default SearchBar\n","const apiKey = 'GogpHmqVqlVbpn_YAXof0zHfDgOoyyhUcUsbC3HsIYcil5qx7CzlbErOBLpySHvAFPcYkiYwBKegnfgvjgaUyhzVjHw54GnGN-NI7JD18KeOXv-q9pYejpn0UdwdX3Yx';\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n        {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        }).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            if(jsonResponse.businesses) {\n                return jsonResponse.businesses.map(business => ({\n                    id: business.id,\n                    imageSrc: business.image_url,\n                    name: business.name,\n                    address: business.location.address1,\n                    city: business.location.city,\n                    state: business.location.state,\n                    zipCode: business.location.zip_code,\n                    category: business.categories[0].title,\n                    rating: business.rating,\n                    reviewCount: business.review_count    \n                }));\n            }\n        });\n    }\n};\nexport default Yelp","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/App/App.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}